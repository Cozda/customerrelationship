import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

import java.sql.*;
import java.io.Console;
import java.util.Scanner;
 
public class customerLoginPage extends JFrame implements ActionListener {
    Container container = getContentPane();
    JLabel userLabel = new JLabel("USERNAME");
    JLabel passwordLabel = new JLabel("PASSWORD");
    JTextField userTextField = new JTextField();
    JPasswordField passwordField = new JPasswordField();
    JButton loginButton = new JButton("LOGIN");
    JButton resetButton = new JButton("CLEAR");
    JCheckBox showPassword = new JCheckBox("Show Password");
    customerLoginPage() {
        setLayoutManager();
        setLocationAndSize();
        addComponentsToContainer();
        addActionEvent();
    }
    public static Connection establish_connection(String database_name, String sql_username, String sql_passwd) 
    {
        Connection conn = null;
        try {
            
            System.out.println("Establishing connection with MySql server on satoshi..");
            conn = DriverManager.getConnection(
            "jdbc:mysql://152.20.12.152/"+database_name+"?useLegacyDatetimeCode=false&serverTimezone=America/New_York"+"&noAccessToProcedureBodies=true"+"&useSSL=false"+"&user="+sql_username+"&password="+sql_passwd);
            
            System.out.println("Connection with MySql server on satoshi.cis.uncw.edu established.");
        }
        catch (SQLException e) {
            System.out.println("SQLException: " + e.getMessage());
            System.out.println("SQLState:     " + e.getSQLState());
            System.out.println("VendorError:  " + e.getErrorCode());
        }
        
        return conn;
    }
    private static void use_database(Connection conn) {
        try {
        // Do something with the Connection
            Statement stmt = conn.createStatement();
            Console c = System.console();
          //Execute a query - which will return a result set
            System.out.println("\n********Show Service Appointment*******\n");
            ResultSet rset = stmt.executeQuery("SELECT * from Services, Reservations"); 
            System.out.println("Service Types    |    Date    |   Time");

            //Iterate over the result set and process each tuple
            while (rset.next()) {
                System.out.println(rset.getString("Name") + "\t" + rset.getString("Date") + rset.getString("Time"));
   
            }
            
            System.out.println("\n*********Show average salaries for employees********");
            
            String sql = "SELECT * FROM Employees WHERE rate < (SELECT AVG(rate) FROM Employees)";

			rset = stmt.executeQuery(sql);
		
			while (rset.next()) {

				System.out.println("People with lower salaries than the average: " + "\t" 
				+ rset.getString("Employee_Name") + "\t" + rset.getString("rate"));
            
            
            
            System.out.println("\n********Update Employees Rate*******\n");
            
            System.out.println("Enter update percent raise for Rate update: ");
            String rate = c.readLine();
            rset = stmt.executeQuery("SELECT * from Employees"); 
            //Iterate over the result set and process each tuple
            System.out.println("\n********Before Update*******\n");
            while (rset.next()) {
                System.out.println(rset.getString("Employee_Name") + "\t" + rset.getString("Rate") + rset.getString("Hours")+rset.getString("Phone_Number")+rset.getString("Street")+rset.getString("Zip"));
            }
            System.out.println("\n********After Update*******\n");
            stmt.executeUpdate("update Employees set Rate = Rate*1.05;");
            rset = stmt.executeQuery("SELECT * from Employees");
            while (rset.next()) {
                System.out.println(rset.getString("Employee_Name") + "\t" + rset.getString("Rate") + rset.getString("Hours")+rset.getString("Phone_Number")+rset.getString("Street")+rset.getString("Zip"));
            }
            // Clean up
            
            rset.close();
            stmt.close(); 
            
		}
        }
        
	
            // Normally, you would close the connection when done
            // The connection is being left open in this example 
            // so that it does not have to re-established 
            //conn.close(); 

        
        catch (SQLException e) {
            System.out.println("SQLException: " + e.getMessage());
            System.out.println("SQLState:     " + e.getSQLState());
            System.out.println("VendorError:  " + e.getErrorCode());
        }
    }
    private static void view(Connection conn) {
    	try {
    		Console c = System.console();
            System.out.println("Service Listing Option");
            Statement stmt = conn.createStatement();
            ResultSet rset = stmt.executeQuery("SELECT * from Services");  
            System.out.println("Service Types | Price | Minutes");

            while (rset.next()) {
                System.out.println(rset.getString(2) + "\t" + rset.getString(3)+"\t"+rset.getString(4));
            }
            rset.close();
            stmt.close();
    	}
    	catch (SQLException e) {
            System.out.println("SQLException: " + e.getMessage());
            System.out.println("SQLState:     " + e.getSQLState());
            System.out.println("VendorError:  " + e.getErrorCode());
        }
        
    	
    }
    private static void prepared_statement(Connection conn) {
        try {
        	//System.out.println(“Enter what kind of appointment you would like to book”)
            //System.out.println(“Enter date you would like to book appointment for: ”)
            //String name = c.readLine();
            ////Select * from Services where name = Marketing
            Console c = System.console();
            
            System.out.println("Prepared statement demo...");
            
            System.out.println("Enter what kind of appointment you would like to book: ");
            String name = c.readLine();
            
            //Say user enters this:  Einstein' or 'Y' = 'Y  ,exactly as shown
            
            PreparedStatement pStmt = conn.prepareStatement(
            "select * from Services where Name = ?");
            
            //Assign name to prepared statement placeholder 
            pStmt.setString(1, name); 
            System.out.println("Prepared statement is " + pStmt);
            
            //Execute a query using the user input - which will return a result set
            ResultSet rset = pStmt.executeQuery();
                        
            //Iterate over the result set and process each tuple
            while (rset.next()) {
                    System.out.println(rset.getString("Name"));
                }
            }
        catch (SQLException e) {
                System.out.println("SQLException: " + e.getMessage());
                System.out.println("SQLState:     " + e.getSQLState());
                System.out.println("VendorError:  " + e.getErrorCode());
            }
    }
    private static void call_stored_procedure(Connection conn) {
        try {
            Scanner c = new Scanner(System.in);
            
            System.out.println("Stored procedure demo..");

            System.out.println("Enter price threshold: ");
            int threshold = Integer.parseInt(c.nextLine());
            System.out.println("Threshold = "+threshold);
            
            CallableStatement cs = conn.prepareCall("{call CountProducts(?, ?)}");
            
            cs.setInt(1, threshold); //note that threshold is declared as an int
            cs.registerOutParameter(2, Types.INTEGER);
            
            //Execute the query associated with the callable statement
            cs.executeQuery();
            
            //Retrieve the result which is associated with the second 
            //parameter (the out parameter)
            int productCount = cs.getInt(2);
                        
            System.out.println("Number of products with price > "+threshold
              +" = "+productCount);
        }
        catch (SQLException e) {
                System.out.println("SQLException: " + e.getMessage());
                System.out.println("SQLState:     " + e.getSQLState());
                System.out.println("VendorError:  " + e.getErrorCode());
            }
    }
    private static int get_option() {
        System.out.println("Choose option 1..4");
        System.out.println("\t1. Use database");
        System.out.println("\t2. Prepared statement");
        System.out.println("\t3. Stored Procedure");
        System.out.println("\t4. View");
        System.out.println("\t5. Exit");
        
        Scanner s = new Scanner(System.in);
        return s.nextInt();
    }
    public void setLayoutManager() {
        container.setLayout(null);
    }
    public void setLocationAndSize() {
        userLabel.setBounds(50, 150, 100, 30);
        userLabel.setFont(new Font("Serif", Font.BOLD, 16));
        userLabel.setForeground(Color.BLUE);
        passwordLabel.setBounds(50, 220, 100, 30);
        passwordLabel.setForeground(Color.BLUE);
        passwordLabel.setFont(new Font("Serif", Font.BOLD, 16));
        userTextField.setBounds(150, 150, 150, 30);
        passwordField.setBounds(150, 220, 150, 30);
        showPassword.setBounds(150, 250, 150, 30);
        loginButton.setBounds(50, 300, 100, 30);
        resetButton.setBounds(200, 300, 100, 30);
    }
    public void addComponentsToContainer() {
        container.add(userLabel);
        container.add(passwordLabel);
        container.add(userTextField);
        container.add(passwordField);
        container.add(showPassword);
        container.add(loginButton);
        container.add(resetButton);
    }
    public void addActionEvent() {
        loginButton.addActionListener(this);
        resetButton.addActionListener(this);
        showPassword.addActionListener(this);
    }
    @Override
    public void actionPerformed(ActionEvent e) {
        //Coding Part of LOGIN button
        if (e.getSource() == loginButton) {
            String userText;
            String pwdText;
            userText = userTextField.getText();
            pwdText = passwordField.getText();
            
            
            if (userText.equalsIgnoreCase("user") && pwdText.equalsIgnoreCase("1234")) {
                JOptionPane.showMessageDialog(this, "Login Successful");
                
            } else {
            	
                JOptionPane.showMessageDialog(this, "Invalid Username or Password");
            }
        }
        //Coding Part of RESET button
        if (e.getSource() == resetButton) {
            userTextField.setText("");
            passwordField.setText("");
        }
       //Coding Part of showPassword JCheckBox
        if (e.getSource() == showPassword) {
            if (showPassword.isSelected()) {
                passwordField.setEchoChar((char) 0);
            } else {
                passwordField.setEchoChar('*');
            }
 
 
        }
    }
    public static void main(String[] args) {
    	customerLoginPage frame = new customerLoginPage();
        frame.setTitle("Please Login Here!");
        frame.setVisible(true);
        frame.setBounds(10, 10, 370, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        
        Console c = System.console();
        String database_name, username;
        
        //read user name, database name, and password, if not specified on command line
        if (args.length > 0) {
            database_name = args[0];
            username = args[0]; 
        }
        else {
            database_name = c.readLine("Database name? ");
            username = c.readLine("User Name? ");
        }
        
        char [] password = c.readPassword("Password? ");

        Connection conn = establish_connection(database_name, username, new String(password));
        
        while (true) {
            int option = get_option();
            switch (option) {
                case 1:
                    use_database(conn);
                    break;
                case 2:
                    prepared_statement(conn);
                    break;
                case 3:
                    call_stored_procedure(conn);
                    break;
                case 4:
                	view(conn);
                	break;
                case 5:
                    System.exit(0);
                    break;
            }
        }
 
    }
}
